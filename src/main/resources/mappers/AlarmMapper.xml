<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="bucheon.leafy.application.mapper.AlarmMapper">

    <insert id="saveAlarm" parameterType="bucheon.leafy.domain.alarm.request.AlarmRequest">
        insert into alarm(user_id, type, table_id, msg, checked, created_at)
        values (#{userId}, #{type}, #{tableId}, #{msg}, false, now())
    </insert>

    <update id="updateCheckAlarm" parameterType="bucheon.leafy.domain.alarm.request.AlarmCheckRequest">
        update alarm
        set checked = true
        where checked = false
          and user_id = #{userId}
          and type = #{type}
          and table_id = #{tableId}
    </update>

    <delete id="deleteAlarm">
        delete
        from alarm
        where checked = true
          and date(DATE_SUB(NOW(), INTERVAL 7 DAY)) > date(created_at)
    </delete>

    <delete id="deleteOneAlarm">
        delete
        from alarm
        where alarm_id = #{id}
    </delete>

    <select id="findByUserId" parameterType="bucheon.leafy.util.request.ScrollRequest" resultType="bucheon.leafy.domain.alarm.response.AlarmResponse">
        select alarm_id, user_id, type, checked, table_id, msg, created_at
        from alarm
        where user_id = #{userId}
          and alarm_id &lt; #{scrollRequest.key}
        order by created_at desc limit #{scrollRequest.size}
    </select>

    <select id="countByUserId" resultType="int">
        select ifnull(count(case when checked ='false' then 1 end), 0) as count
        from alarm
        where user_id = #{userId}
    </select>

    <select id="findById" resultType="Hashmap">
        select alarm_id, user_id, type, checked, table_id, msg, created_at
        from alarm
        where alarm_id = #{id}
    </select>

    <select id="findFirstByUserId" parameterType="bucheon.leafy.util.request.ScrollRequest" resultType="bucheon.leafy.domain.alarm.response.AlarmResponse">
        select alarm_id, user_id, type, checked, table_id, msg, created_at
        from alarm
        where user_id = #{userId}
        order by created_at desc limit #{scrollRequest.size}
    </select>

</mapper>